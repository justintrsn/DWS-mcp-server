# Docker Compose for PostgreSQL MCP Server with Anime Database
version: '3.8'

services:
  # PostgreSQL Database with Anime Data
  postgres-anime:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    container_name: mcp-postgres-anime
    restart: unless-stopped
    environment:
      POSTGRES_DB: test_footfall
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5434:5432"  # Map to 5434 to avoid conflicts with local PostgreSQL
    volumes:
      # Persist data
      - postgres-anime-data:/var/lib/postgresql/data
      # Optional: custom PostgreSQL configuration
      # - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_footfall"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network

  # PostgreSQL MCP Server
  mcp-server:
    image: swr.ap-southeast-3.myhuaweicloud.com/wooyankit/dws-mcp-server:latest
    container_name: mcp-server
    restart: unless-stopped
    depends_on:
      postgres-anime:
        condition: service_healthy
    ports:
      - "3000:3000"    # MCP SSE endpoint
      - "8080:8080"    # Health API
    environment:
      # Database Configuration - Direct URI to bypass config file
      DATABASE_URI: postgresql://test_user:test_pass@postgres-anime:5432/test_footfall
      DOCKER_ENV: "true"

      # Server Configuration
      LOG_LEVEL: INFO
      MCP_PORT: 3000

      # Huawei MAAS Configuration (for LLM integration)
      MAAS_API_KEY: oVoWyKNsGDF-_pIp3CoQTN4NVI43O0iTJdJQVvWqYl5aMZ_Pqe-nPEYK_QqtKEqlz1FDWmW1wHO861dauTjk3w
      MAAS_BASE_URL: https://api.modelarts-maas.com/v1
      MAAS_MODEL_NAME: deepseek-v3.1
    volumes:
      # Mount configuration files
      - ./config:/app/config:ro
      # Optional: Mount logs directory
      - ./logs:/app/logs
      # Optional: Mount additional scripts
      - ./scripts:/app/scripts:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mcp-network

# Named volumes for data persistence
volumes:
  postgres-anime-data:
    driver: local
    name: mcp-postgres-anime-data

# Custom network for service communication
networks:
  mcp-network:
    driver: bridge
    name: mcp-network

